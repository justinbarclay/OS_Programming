* Notes
- Sub-directory tests where three example driver programs and any supporting
  files for those tests are stored
- Driver programs perform initialization and invoke findpattern() print the
  results in human readable form 
    + Then they perform some operation which results in a change of the address space contents, and then
    findpattern() is called again and its results printed in human-readable form
- Three drivers is for you to attempt three different ways
  to introduce or change the location(s) and mode(s) of the pattern. You
  must not prompt for user interaction in order to perform these changes.))
- Must have Tests.txt as readme for tests
- Need 2 makefiles
    + make tests at the top level invokes
    recursively the Makefile of the tests subdirectory, compiles and runs
    the tests, producing their combined human readable output to a file
    test_results.txt in the tests subdirectory
    + Dependencies are expected
    to exist that will require the re-generation of the test_results.txt
    should the test drivers and any supporting files change
** Human Readable Format
- Report value from findpattern
- Symbolic form of mode
- Additional clarification is acceptable
- We are interested in non-overlapping occurrences of the pattern. For (a
  grossly simplified) example, assume the pattern is ababa and the memory contents
  are  abababababa. The result would then be two matches only, one starting at the
  first location and the second starting at the seventh location)
* Notes about scanning the address space
- /proc/self/maps contains information about the address space of various
  processes
- Each row follows the same format:
    address permissions offset device inode pathname
    + *address* - This is the starting and ending address of the region in the process's address space
    + *permissions* - This describes how pages in the region can be accessed. 
    + *offset* - If the region was mapped from a file (using mmap), this is the offset in the file 
    where the mapping begins. If the memory was not mapped from a file, it's just 0.
    + *device* - If the region was mapped from a file, this is the major and minor device number (in hex) where the file lives.
    + *inode* - If the region was mapped from a file, this is the file number.
    + *pathname* - If the region was mapped from a file, this is the name of the
    file. This field is blank for anonymous mapped regions. There are also
    special regions with names like [heap], [stack], or [vdso]. [vdso] stands for
    virtual dynamic shared object. It's used by system calls to switch to
    kernel mode
- Can also pull info from your own elf file
- I think we need to do it with the elf file 
    + read elf 5
** Helpful links
    http://stackoverflow.com/questions/28098285/scan-memory-of-calling-process
